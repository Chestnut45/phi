design / features
--------------------------------

high priority:
- design voxel map pipeline (design, import, usage, simulation, serialization)
    - is it a component? does it own nodes? a scene?
- .vmap file format design
- input buffering
- design voxel editor gui
- raycasting mouse to select voxel on grid for edit / painting

mid priority:
- decide material tags from sketchbook list (ferromagnetic (magnetizable, attracted to / repelled by magnets), immovable?)
- decide per-voxel / per-object flags (asleep, onFire, etc.)
- plasma (make a sheet of which tags influence which engine behaviours (if you want x behaviour, make a material with x tag))
- ^ {scripting language for custom behaviour / interactions (anything that needs more data than a flag)}
- is organic growth a separate column, or part of the scriptable behaviour?
- core engine simulation systems:
    - fire (spread, burn, smoke, ignite, damage, melt, extinguish)
    - electricity (voltage from sources, current flows through voxels depending on conductivity, can magnetize ferromagnetic materials)
    - magnets (monopoles, materials can have base charge, ferromagnetic voxels can be magnetized either by an electromagnet, or impulse charge)
    - gravity (affects all particles / objects)
    - cellular automata based fluid simulation
    - particles (voxel particles?)
    - waves / effects (static / dynamic hitboxes that interact [apply force, adjust state, etc.] with entities or voxels)
    - explosions
    - acid
    - weather

low priority:
- icosphere flat normals
- move icosphere generation outside of BasicMesh so we can use it to have different LODs for point light proxy geometry
- better Texture2D constructors
- binary mode for File IO?
- EventManager (wait for a good use case before implementing)
- Sprite2D
- text rendering
- audio library choice (likely OpenAL)
- pbr materials
- ColorRGBAFloat / ColorRGBByte wrappers?
- extend quadtree to octree (may be useful for speeding up raycast queries in voxel editor?)
- implement rehash / resize + write unit tests for HashMap
- design world building workflow (gui app? text format? biomes, landmasses, structures, models, entities, stamps...)
- physics bodies (rigidbody.cpp, etc.)
- tunable SSAO (radius, blur, samples, etc.)
- directional light separate brightness and color?

bugs / fixes
--------------------------------

high priority:
- 

mid priority:
- move glew dll in windows from system32 to executable folder?

low priority:
- speedup cpu particle effect by removing instancing (generate quad in vs, use static index buffer)