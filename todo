design / features
--------------------------------

high priority:
- gBuffer redesign
    - switch material index texture to albedo/roughness/metallic
    - emissive texture / PBRMaterial parameter
    - allows various shader effects to impact color regardless of material
- voxel object editor gui design
    - material loading
    - palette display
    - erase
    - replace
    - resize canvas
    - save / load .vobj
    - simulation toggles / controls
    - select tool / move tool
    - toggleable arbitrary planes to test against
- orthographic camera projection
- improved camera controls
- fire spread / heat distribution simulation
- finalize fluid dynamics (pressure simulation?)
- world generation / chunk rework
    - per-chunk aabb frustum culling
    - simulation sleeping
    - full noise editor (fractal, domain warp, etc.)
- emissive voxels (bloom + emissive pbr materials?)
- voxel particles (off-grid, momentum based)
- entity system (not all nodes are entities, but all entities are nodes)
    - items (transform, voxel model, item data, aabb/obb)
    - organisms (transform, voxel object, AI controller, organism data, aabb/obb)

mid priority:
- propagate color class through rest of engine
- scene debug gui rework
- environment refactor
    - sky color modulation
    - sun size consistency
    - proper horizon calculation (not screen space)
    - optional skybox textures
    - cleanup scene render (move to environment render)
- gamepad input
- 3rd person controller
- animated voxel models
- core engine simulation systems:
    - fire (spread, burn, smoke, ignite, damage, melt, extinguish)
    - electricity (voltage from sources, current flows through voxels depending on conductivity, can magnetize ferromagnetic materials)
    - magnets (monopoles, materials can have base charge, ferromagnetic voxels can be magnetized either by an electromagnet, or impulse charge)
    - physics voxel objects (collision, force accumulation)
    - waves / effects (static / dynamic hitboxes that interact [apply force, adjust state, etc.] with entities or voxels)
    - explosions
    - acid
    - weather

low priority:
- icosphere flat normals
- move icosphere generation outside of BasicMesh so we can use it to have different LODs for point light proxy geometry
- better Texture2D constructors
- binary mode for File IO?
- EventManager (wait for a good use case before implementing)
- Sprite2D
- text rendering
- audio library choice (likely OpenAL)
- extend quadtree to octree (may be useful for speeding up raycast queries in voxel editor?)
- implement rehash / resize + write unit tests for HashMap
- physics bodies (rigidbody.cpp, etc.)
- tunable SSAO (radius, blur, samples, etc.)
- input buffering
- structure generation (WFC)

optimizations:
- profile voxel mesh render time
- only upload mesh data when updating / loading / unloading chunks?
- reuse buffer sections when no updates happen?
- static normals per vertex instead of dfdx/dfdy in fragment shader? (mult by inverse model matrix, already available)
- mesh culling (generate AABB or OBB for basic / voxel meshes)
- occlusion culling (GL query objects, rasterize bounding box, test for samples passed)
- speedup cpu particle effect by removing instancing (generate quad in vs, use static index buffer)
- aggregate volume broadphase (AABB encompassing all internal volumes useful for complex aggregates, early out)

graphics:
- HDR rendering with exposure based tone mapping (configurable via scene)
- pbr bloom (downsampling method)
- shadow mapping
- debug visualizations
- BasicMesh .obj loading
- TexturedMesh?
- volumetric fog (move away from screenspace scattering method...?)

bugs / fixes
--------------------------------

high priority:
- voxel raycasting bug (selection incorrect at certain edge cases?)

mid priority:
- move glew dll in windows from system32 to executable folder?

low priority:
-