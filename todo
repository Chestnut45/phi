design / features
--------------------------------

high priority:
- voxel object editor
    - material loading
    - palette display
    - erase
    - replace
    - resize canvas
    - save / load .vobj
    - select tool / move tool
    - toggleable arbitrary planes to test against
- color class (manage internal float representation, cheap convert to hex, rgba, FromHex(string), FromRGBA(float4))
    - switch all other engine components to use color class where appropriate (materials, vertex data, etc.)
- orthographic camera projection
- improved camera controls
- transparent voxel rendering (transparent pbr materials?)
- full noise editor (fractal, domain warp, etc.)
- chunk generation
    - noise parameters
    - feature types? (rivers, waterfalls, flora, mountains, etc.)
    - structure generation / model stamping

mid priority:
- gamepad input
- 3rd person controller
- animated voxel models
- decide material tags from sketchbook list (ferromagnetic (magnetizable, attracted to / repelled by magnets), immovable?)
- decide per-material / per-voxel / per-object flags (asleep, onFire, etc.)
- plasma (make a sheet of which tags influence which engine behaviours (if you want x behaviour, make a material with x tag))
- ^ {scripting language for custom behaviour / interactions (anything that needs more data than a flag)}
- is organic growth a separate column, or part of the scriptable behaviour?
- core engine simulation systems:
    - fire (spread, burn, smoke, ignite, damage, melt, extinguish)
    - electricity (voltage from sources, current flows through voxels depending on conductivity, can magnetize ferromagnetic materials)
    - magnets (monopoles, materials can have base charge, ferromagnetic voxels can be magnetized either by an electromagnet, or impulse charge)
    - gravity (affects all particles / objects)
    - cellular automata based fluid simulation
    - particles (voxel particles?)
    - waves / effects (static / dynamic hitboxes that interact [apply force, adjust state, etc.] with entities or voxels)
    - explosions
    - acid
    - weather

low priority:
- icosphere flat normals
- move icosphere generation outside of BasicMesh so we can use it to have different LODs for point light proxy geometry
- better Texture2D constructors
- binary mode for File IO?
- EventManager (wait for a good use case before implementing)
- Sprite2D
- text rendering
- audio library choice (likely OpenAL)
- extend quadtree to octree (may be useful for speeding up raycast queries in voxel editor?)
- implement rehash / resize + write unit tests for HashMap
- physics bodies (rigidbody.cpp, etc.)
- tunable SSAO (radius, blur, samples, etc.)
- input buffering
- voxel particle effects?

optimizations:
- profile voxel mesh render time
- only upload mesh data when updating / loading / unloading chunks?
- reuse buffer sections when no updates happen?
- static normals per vertex instead of dfdx/dfdy in fragment shader? (mult by inverse model matrix, already available)
- mesh culling (generate AABB or OBB for basic / voxel meshes)
- occlusion culling (GL query objects, rasterize bounding box, test for samples passed)
- speedup cpu particle effect by removing instancing (generate quad in vs, use static index buffer)
- aggregate volume broadphase (AABB encompassing all internal volumes useful for complex aggregates, early out)

graphics:
- HDR rendering with exposure based tone mapping (configurable via scene)
- pbr bloom (downsampling method)
- shadow mapping
- debug visualizations
- BasicMesh .obj loading
- TexturedMesh?
- volumetric fog (move away from screenspace scattering method...?)

bugs / fixes
--------------------------------

high priority:
- voxel raycasting bug (selection incorrect at certain edge cases?)

mid priority:
- move glew dll in windows from system32 to executable folder?

low priority:
-