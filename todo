TODO: Reorganize all notes / todos / design documents using obsidian (manual backup)

design / features
--------------------------------

high priority:

- editor projects
    - project settings (project.yaml)
    - template app, cmake generation
    - editor / project build process (bundle gcc/g++? request c++20 compiler from user?)
    - support custom components in scene editor? (virtual Update(), ShowEditorGUI())
    - forward entt::iterable_adaptor to user for component / NodeID iteration
    - script component design
- scene hierarchy (nodes, components) gui implementation
    - node names
    - node ordering
    - add / remove components
    - add / remove child nodes
- environment component inspector implementation (test 2 designs, mostly rip from scene debug)
- particle effect / emitter inspector gui rewrite (emissive color property and MRT)
- resources window design (data:// folder tree view)
    - are materials resources? per project? per scene? (materials.yaml)
    - VoxelMaterial redesign (independant from PBRMaterial)
- voxel editor gui design
    - ImGui::TextRadioButton extension (where does this fit? polluting ImGui's namespace seems bad...)
    - voxel material palette / editor
    - brush settings
    - resize canvas
    - save / load .vobj
    - simulation toggles / controls
    - select tool / move tool
    - toggleable arbitrary planes to test against
    - orthographic camera projection
    - improved camera controls

- improve fire spread logic (heat distribution simulation?)
- liquid shader effect
- plasma shader effect (ridged noise + elapsedTime)
- finalize fluid dynamics
    - lighter fluids should float on denser fluids
    - full pressure distribution?
- world generation / chunk rework
    - per-chunk aabb frustum culling
    - simulation sleeping
    - full noise editor (fractal, domain warp, etc.)
- voxel particles (off-grid, momentum based)
- entity system (not all nodes are entities, but all entities are nodes)
    - items (transform, voxel model, item data, aabb/obb)
    - organisms (transform, voxel object, AI controller, organism data, aabb/obb)

mid priority:
- physics / collision detection design
    - physics world / voxel world
    - rigidbody component
    - obb implementation
    - capsule implementation
- propagate color class through rest of engine
- environment refactor
- gamepad input
- 3rd person controller
- animated voxel models
- core engine simulation systems:
    - fire (spread, burn, smoke, ignite, damage, melt, extinguish)
    - electricity (voltage from sources, current flows through voxels depending on conductivity, can magnetize ferromagnetic materials)
    - magnets (monopoles, materials can have base charge, ferromagnetic voxels can be magnetized either by an electromagnet, or impulse charge)
    - physics voxel objects (collision, force accumulation)
    - waves / effects (static / dynamic hitboxes that interact [apply force, adjust state, etc.] with entities or voxels)
    - explosions
    - acid
    - weather

low priority:
- Sprite2D
- text rendering
- scene debug gui rework
- icosphere flat normals
- move icosphere generation outside of BasicMesh so we can use it to have different LODs for point light proxy geometry
- better Texture2D constructors
- binary mode for File IO?
- EventManager (wait for a good use case before implementing)
- audio library choice (likely OpenAL)
- extend quadtree to octree (may be useful for speeding up raycast queries in voxel editor?)
- implement rehash / resize + write unit tests for HashMap
- physics bodies (rigidbody.cpp, etc.)
- tunable SSAO (radius, blur, samples, etc.)
- input buffering
- structure generation (WFC)

optimizations:
- profile voxel mesh render time
- only upload mesh data when updating / loading / unloading chunks?
- reuse buffer sections when no updates happen?
- static normals per vertex instead of dfdx/dfdy in fragment shader? (mult by inverse model matrix, already available)
- mesh culling (generate AABB or OBB for basic / voxel meshes)
- occlusion culling (GL query objects, rasterize bounding box, test for samples passed)
- speedup cpu particle effect by removing instancing (generate quad in vs, use static index buffer)
- aggregate volume broadphase (AABB encompassing all internal volumes useful for complex aggregates, early out)

graphics:
- tone map exposure settings
- pbr bloom (downsampling method)
- z-buffer unsharp mask for cheaper ssao (low quality option)
- shadow mapping
- debug visualizations
- BasicMesh .obj loading
- TexturedMesh?
- volumetric fog (move away from screenspace scattering method...?)

bugs / fixes
--------------------------------

high priority:
- voxel raycasting bug (selection incorrect at certain edge cases?)

mid priority:
- auto-move glew dll in windows to executable folder?

low priority:
- 